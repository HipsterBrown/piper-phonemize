name: Build Wheels

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build_mac_native_sources:
    name: Build c++ source for MacOS wheels
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        id: cache
        with:
          path: install/
          key: ${{matrix.os}}-${{hashFiles('install/')}}

      - name: build
        if: steps.cache.outputs.cache-hit != 'true'
        run: make

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: piper-phonemize_macos_${{runner.arch}}
          path: install/

  build_macos_wheels:
    name: Build wheels on ${{matrix.os}}-${{matrix.arch}}
    runs-on: ${{matrix.os}}
    needs: build_mac_native_sources
    strategy:
      fail-fast: true
      matrix:
        include:
          - {os: macos-13, arch: x86_64, build: "*"}
          - {os: macos-14, arch: arm64, build: "*"}

    steps:
      - uses: actions/checkout@v4

      - name: Fetch prebuilt sources (MacOS)
        uses: actions/download-artifact@v4
        with:
          name: piper-phonemize_macos_${{runner.arch}}
          path: install

      - name: Preview install directory
        run: ls -la install/

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_SKIP: '*-musllinux*'
        with:
          config-file: ./pyproject.toml


      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{matrix.os}}-${{matrix.arch}}-${{strategy.job-index}}
          path: ./wheelhouse/*.whl

  build_linux_native_sources:
    name: Build c++ sources for Linux wheels
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        id: cache
        with:
          path: dist/
          key: ${{runner.os}}-${{hashFiles('dist/')}}

      - name: Set up QEMU
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - uses: docker/setup-buildx-action@v3
        if: steps.cache.outputs.cache-hit != 'true'

      - name: build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker buildx build . --platform linux/amd64,linux/arm64 --output 'type=local,dest=dist'

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: piper-phonemize_linux_aarch64.tar.gz
          path: dist/linux_arm64/piper-phonemize_arm64.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: piper-phonemize_linux_x86_64.tar.gz
          path: dist/linux_amd64/piper-phonemize_amd64.tar.gz


  build_linux_wheels:
    name: Build wheels on ${{matrix.os}}-${{matrix.arch}}
    runs-on: ${{matrix.os}}
    needs: build_linux_native_sources
    strategy:
      fail-fast: true
      matrix:
        include:
          - {os: ubuntu-latest, arch: x86_64, build: "*"}
          - {os: ubuntu-latest, arch: aarch64, build: "*[61]-manylinux_aarch64"}
          - {os: ubuntu-latest, arch: aarch64, build: "*[72]-manylinux_aarch64"}
          - {os: ubuntu-latest, arch: aarch64, build: "*[83]-manylinux_aarch64"}
          - {os: ubuntu-latest, arch: aarch64, build: "*[94]-manylinux_aarch64"}
          - {os: ubuntu-latest, arch: aarch64, build: "*[05]-manylinux_aarch64"}

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Fetch prebuilt sources (aarch64)
        uses: actions/download-artifact@v4
        if: matrix.arch == 'aarch64'
        with:
          name: piper-phonemize_linux_aarch64.tar.gz
          path: install

      - name: Fetch prebuilt sources (x86_64)
        uses: actions/download-artifact@v4
        if: matrix.arch == 'x86_64' && matrix.os == 'ubuntu-latest'
        with:
          name: piper-phonemize_linux_x86_64.tar.gz
          path: install

      - name: Preview install directory
        run: ls -la install/

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          CIBW_BUILD: ${{ matrix.build }}
          CIBW_SKIP: '*-musllinux*'
        with:
          config-file: ./pyproject.toml


      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{matrix.os}}-${{matrix.arch}}-${{strategy.job-index}}
          path: ./wheelhouse/*.whl


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz
